# name of the pipeline
name: cd

on:
  # it will get executed on push
  push:
  # changes will be published to the main branch
    branches:
      - "main"
    paths:
    ## paths - changes in which files will trigger this file
      - "src/terraform/**"
      - ".github/workflow/**"

# setting up environment variables for reuse
env:
  # directory in which the terraform commands will be executed
  TERRAFORM_WORKING_DIRECTORY: src/terraform
  DOTNET_WORKING_DIRECTORY: src/dotnet/GitHubDemo
  APPLICATION_NAME: "aztf"
  ENVIRONMENT_NAME: "dev"
  DOTNET_VERSION: "6.0.401"


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Sets up .NET with specific version
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3 
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{env.DOTNET_WORKING_DIRECTORY}}

      - name: Build
        #--no-restore = skips the implicit restore operation performed before
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{env.DOTNET_WORKING_DIRECTORY}}

      - name: Test
        # --filter Category=Unit
        # only tests with specified category of Unit will be excecuted
        # we will set the Category=Unit int the C# code
        run: dotnet test --no-restore --verbosity normal --filter Category=Unit
        working-directory: ./src/dotnet/GitHubDemo.UnitTests

      - name: Publish
        # dotnet publish will allow us to create the artifact that we gonna deployed
        # it gets ready the azure code to be packaged up
        # gonna be published into new directory src/dotnet/GitHubDemo/publish
        # run: dotnet publish /home/runner/work/Terraform-Practise-v1/Terraform-Practise-v1/src/dotnet/GitHubDemo/GitHubDemo.csproj -c Release -o ./publish
        run: dotnet publish /**/GitHubDemo.csproj -c Release -o ./publish
        working-directory: ${{env.DOTNET_WORKING_DIRECTORY}}

      - name: Generate Deployment package
        # create a zip file in dotnet working directory - src/dotnet/GitHubDemo
        # ./ - current working directory - src/dotnet/GitHubDemo/publish - set int working-directory
        run: | 
          zip -r ../deployment.zip ./
        working-directory: ${{env.DOTNET_WORKING_DIRECTORY}}/publish

      - name: Upload Deployment Package
        # run action to create and artifact with name function-deployment from the /deployment.zip
        uses: actions/upload-artifact@v2
        with:
          name: function-deployment
          path: ${{env.DOTNET_WORKING_DIRECTORY}}/deployment.zip


  terraform:
    # job will run on ubuntu based VM
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 ## checks our the code from the repository - !important
      # its the process of fetching the code from my repository to the
      # environment where the workflow is running

      # set up terraform on ubuntu VM
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.5
          terraform_wrapper: false

      # Apply terraform configuration
      - name: Terraform Apply
        env:
          # ARM - Azure credentials for authentication and authorization, so we can interact with Azure resources
          ARM_SUBSCRIPTION_ID: ${{vars.ARM_SUBSCRIPTION_ID}}
          ARM_TENANT_ID: ${{vars.ARM_TENANT_ID}}
          ARM_CLIENT_ID: ${{vars.ARM_CLIENT_ID}}
          ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
          # Configure Terraform backend, to store the .state file
          BACKEND_RESOURCE_GROUP_NAME: ${{vars.BACKEND_RESOURCE_GROUP_NAME}}
          BACKEND_STORAGE_ACCOUNT_NAME: ${{vars.BACKEND_STORAGE_ACCOUNT_NAME}}
          BACKEND_STORAGE_CONTAINER_NAME: ${{vars.BACKEND_STORAGE_CONTAINER_NAME}}
          # Variables to pass values to Terraform configuration files
          TF_VAR_application_name: ${{env.APPLICATION_NAME}}
          TF_VAR_environment_name: ${{env.ENVIRONMENT_NAME}}
          # Key for storing the state file in the backend
          # this is how the file will be named inside the blob storage => aztf-dev
          # the name of the blob storage(container) will be tfstate by default
          TF_BACKEND_KEY: ${{env.APPLICATION_NAME}}-${{env.ENVIRONMENT_NAME}}
        # specifies directory in which will the commands beneath get executed
        working-directory: ${{env.TERRAFORM_WORKING_DIRECTORY}}
        run: |
          terraform init \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" \
            -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME" \
            -backend-config="key=$TF_BACKEND_KEY"

          terraform apply -auto-approve
